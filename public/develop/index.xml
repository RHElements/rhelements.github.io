<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on RHElements</title>
    <link>rhelements.github.io/develop/</link>
    <description>Recent content in Develop on RHElements</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 14:02:31 -0400</lastBuildDate>
    
	<atom:link href="rhelements.github.io/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create a RHElement: Step 1</title>
      <link>rhelements.github.io/develop/step-1/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-1/</guid>
      <description>Create a RHElement: Step 1 Prerequisites Before you begin, make sure you&amp;rsquo;ve followed the Prerequisites in Getting Started.
Step 1: Scaffold an Element Use the RHElement generator to start the scaffolding process. From the root directory of the RHElements repository, run the following command.
npm run new  The generator will ask you a series of questions to set up your project.
 Your element name:
 Your element&amp;rsquo;s name should be lowercase and needs to contain at least one hyphen.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2a</title>
      <link>rhelements.github.io/develop/step-2a/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2a/</guid>
      <description>Create a RHElement: Step 2a Develop a Structure Run the dev command found in the package.json file at the root of your element to start watching for changes to any files located in the /src directory. This will build rh-cool-element.js and rh-cool-element.umd.js whenever you save changes.
# from the root of your element npm run dev  After running the dev command, start a server at the root of the RHElements repository to view it in the browser.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2b</title>
      <link>rhelements.github.io/develop/step-2b/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2b/</guid>
      <description>Create a RHElement: Step 2b Write your HTML Now that our element is set up and our dev server is running, let&amp;rsquo;s take advantage of the slot and shadow root to make our element a bit more interesting.
We&amp;rsquo;ll edit the /src/rh-cool-element.html file to add some additional HTML. Let&amp;rsquo;s turn rh-cool-element into a profile element that has a profile photo, a username, and a button to follow the user.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2c</title>
      <link>rhelements.github.io/develop/step-2c/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2c/</guid>
      <description>Create a RHElement: Step 2c Write your CSS (or SASS) We want the rh-cool-element to have a profile photo, a username, and a follow button. Right now, it only contains the HTML structure, but we can style our element by updating our Sass (or CSS) to make it look the way we want.
We&amp;rsquo;ll be working in the /src/rh-cool-element.scss file since we decided to use the Sass option in the RHElement generator.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2d</title>
      <link>rhelements.github.io/develop/step-2d/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2d/</guid>
      <description>Create a RHElement: Step 2d Integrate your JavaScript In this step, we will: - Add a click listener to the follow button - Set a follow state on element - Add a the profile photo - Properly disconnect our element
First, we&amp;rsquo;ll go ahead and listen for click events on the button. The best place to add a click listener is in the constructor, according to the W3C Custom Elements draft section called &amp;ldquo;2.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 3</title>
      <link>rhelements.github.io/develop/step-3/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-3/</guid>
      <description>Create a RHElement: Step 3 Write tests Let&amp;rsquo;s write a test for the rh-cool-element.
We rely on a few tools to ensure our element is reliable in production: 1. Web Component Tester, built and maintained by the Polymer team, makes testing easy. All we have to do is add the element&amp;rsquo;s HTML to a file and set up our suite of tests. 2. We&amp;rsquo;ll use the Chai Assertion Library to make sure our tests pass since Mocha and Chai are both included in Web Component Tester.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 4</title>
      <link>rhelements.github.io/develop/step-4/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-4/</guid>
      <description>Create a RHElement: Step 4 Publish We&amp;rsquo;ve been publishing our RHElements to the @rhelements organization on npm.</description>
    </item>
    
  </channel>
</rss>