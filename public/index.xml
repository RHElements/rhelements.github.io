<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RHElements</title>
    <link>rhelements.github.io/</link>
    <description>Recent content on RHElements</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 14:02:31 -0400</lastBuildDate>
    
	<atom:link href="rhelements.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Browser Support</title>
      <link>rhelements.github.io/get-started/browser-support/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/get-started/browser-support/</guid>
      <description>Browser Support RHElements are built on top of the Custom Elements v1 spec. As a result, with the help of the web components polyfill, we can support all major browsers and go all the way back to IE 11.
   Chrome Firefox Safari Edge IE 11     &amp;#10003; &amp;#10003; &amp;#10003; &amp;#10003; &amp;#10003;    Written in ES6 To make sure we&amp;rsquo;re future-proof, RHElements are written in ES6.</description>
    </item>
    
    <item>
      <title>Code of conduct</title>
      <link>rhelements.github.io/site-info/code-of-conduct/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/site-info/code-of-conduct/</guid>
      <description>Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
Our Standards Examples of behavior that contributes to creating a positive environment include:</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 1</title>
      <link>rhelements.github.io/develop/step-1/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-1/</guid>
      <description>Create a RHElement: Step 1 Prerequisites Before you begin, make sure you&amp;rsquo;ve followed the Prerequisites in Getting Started.
Step 1: Scaffold an Element Use the RHElement generator to start the scaffolding process. From the root directory of the RHElements repository, run the following command.
npm run new  The generator will ask you a series of questions to set up your project.
 Your element name:
 Your element&amp;rsquo;s name should be lowercase and needs to contain at least one hyphen.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2a</title>
      <link>rhelements.github.io/develop/step-2a/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2a/</guid>
      <description>Create a RHElement: Step 2a Develop a Structure Run the dev command found in the package.json file at the root of your element to start watching for changes to any files located in the /src directory. This will build rh-cool-element.js and rh-cool-element.umd.js whenever you save changes.
# from the root of your element npm run dev  After running the dev command, start a server at the root of the RHElements repository to view it in the browser.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2b</title>
      <link>rhelements.github.io/develop/step-2b/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2b/</guid>
      <description>Create a RHElement: Step 2b Write your HTML Now that our element is set up and our dev server is running, let&amp;rsquo;s take advantage of the slot and shadow root to make our element a bit more interesting.
We&amp;rsquo;ll edit the /src/rh-cool-element.html file to add some additional HTML. Let&amp;rsquo;s turn rh-cool-element into a profile element that has a profile photo, a username, and a button to follow the user.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2c</title>
      <link>rhelements.github.io/develop/step-2c/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2c/</guid>
      <description>Create a RHElement: Step 2c Write your CSS (or SASS) We want the rh-cool-element to have a profile photo, a username, and a follow button. Right now, it only contains the HTML structure, but we can style our element by updating our Sass (or CSS) to make it look the way we want.
We&amp;rsquo;ll be working in the /src/rh-cool-element.scss file since we decided to use the Sass option in the RHElement generator.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 2d</title>
      <link>rhelements.github.io/develop/step-2d/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2d/</guid>
      <description>Create a RHElement: Step 2d Integrate your JavaScript In this step, we will: - Add a click listener to the follow button - Set a follow state on element - Add a the profile photo - Properly disconnect our element
First, we&amp;rsquo;ll go ahead and listen for click events on the button. The best place to add a click listener is in the constructor, according to the W3C Custom Elements draft section called &amp;ldquo;2.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 3</title>
      <link>rhelements.github.io/develop/step-3/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-3/</guid>
      <description>Create a RHElement: Step 3 Write tests Let&amp;rsquo;s write a test for the rh-cool-element.
We rely on a few tools to ensure our element is reliable in production: 1. Web Component Tester, built and maintained by the Polymer team, makes testing easy. All we have to do is add the element&amp;rsquo;s HTML to a file and set up our suite of tests. 2. We&amp;rsquo;ll use the Chai Assertion Library to make sure our tests pass since Mocha and Chai are both included in Web Component Tester.</description>
    </item>
    
    <item>
      <title>Create a RHElement: Step 4</title>
      <link>rhelements.github.io/develop/step-4/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-4/</guid>
      <description>Create a RHElement: Step 4 Publish We&amp;rsquo;ve been publishing our RHElements to the @rhelements organization on npm.</description>
    </item>
    
    <item>
      <title>Framework Support</title>
      <link>rhelements.github.io/get-started/framework-support/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/get-started/framework-support/</guid>
      <description>Framework Support One of the goals of RHElements is to create web components that will work with any number of javascript frameworks. RHElements are built on top of the Custom Elements v1 spec so they should just work. There are some caveats, but we&amp;rsquo;ll get to those later.
Supported and Tested Frameworks  AngularJS Angular React Vue  If a framework isn&amp;rsquo;t listed above, it doesn&amp;rsquo;t mean that RHElements won&amp;rsquo;t work with that framework.</description>
    </item>
    
    <item>
      <title>Join the Community</title>
      <link>rhelements.github.io/site-info/community/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/site-info/community/</guid>
      <description>Contribute to RHElements How to Report a Bug Think you found a bug? Please check the list of open issues to see if your bug has already been reported. If it hasn&amp;rsquo;t please submit a new issue.
How to Suggest a Feature or Enhancement Open an issue which describes the feature you would like to see, why you want it, how it should work, etc.
Bootstrapping Your Local Development Environment npm install  Running Tests npm test  Code of Conduct This project is governed by the Contributor Covenant Code of Conduct.</description>
    </item>
    
    <item>
      <title>Polyfills</title>
      <link>rhelements.github.io/get-started/polyfills/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/get-started/polyfills/</guid>
      <description>Since all browsers don&amp;rsquo;t support ES6 modules, custom elements, shadow DOM, and custom CSS variables yet, we need to add a few polyfills to make everything work across all the browsers that we support.
The easiest way to get everything working is to add the following polyfills to the head of your document.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;RHElements&amp;lt;/title&amp;gt; &amp;lt;!-- polyfills --&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.10/custom-elements-es5-adapter.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.10/webcomponents-lite.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html  custom-elements-es5-adapter This polyfill is needed if your custom elements have been compiled from ES6 to ES5.</description>
    </item>
    
    <item>
      <title>Questions?</title>
      <link>rhelements.github.io/site-info/get-help/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/site-info/get-help/</guid>
      <description> Reach out to the team </description>
    </item>
    
    <item>
      <title>RH Layouts</title>
      <link>rhelements.github.io/theme/rhe-layouts/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/theme/rhe-layouts/</guid>
      <description>main { padding: 32px; background: #e7e7e7; } header h1 { margin-top: 0; } section { margin: 32px 0; } section section { padding: 32px; background: #fff; box-shadow: 0 1px 3px rgba(0,0,0,.2); } section section  h3 { margin-top: 0; } section section  h4 { margin-top: 32px; } pre { padding: 8px; /* border: 1px solid #dedede; */ } .rhe-l-grid  * { background: #e0d7ee; padding: 8px; } :not(pre)code[class*=language-], pre[class*=language-] { background: #f2f2f2; }    Grid  Pure Grid Item Item Item Item Item  Code &amp;lt;div class=&#34;</description>
    </item>
    
  </channel>
</rss>