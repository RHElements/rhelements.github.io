// ============================================================================
// Note: There should be no direct HEX or other values in this file.
// Please reference CP-SASS variables.
// ============================================================================
//
// Global vars are named:
// `$rh-global--concept--PropertyTitleCase--modifier--state`
// For example:
// * $rh-global--color--primary
// * $rh-global--FontSize
// * --rhe-theme--FontSize--heading--xs

// Component/Element vars are named:
// `$rh-c-block__element--modifier--state--PropertyTitleCase`
// For example:
// * --rh-dropdown--heading--FontSize
// * --cp-accordion--heading--FontSize

:root {
  /* GRID BREAKPOINTS */
  --rhe-theme--grid-breakpoint--xs:       $rh-global--grid-breakpoint--xs;
  --rhe-theme--grid-breakpoint--sm:       $rh-global--grid-breakpoint--sm;
  --rhe-theme--grid-breakpoint--md:       $rh-global--grid-breakpoint--md;
  --rhe-theme--grid-breakpoint--lg:       $rh-global--grid-breakpoint--lg;
  --rhe-theme--grid-breakpoint--xl:       $rh-global--grid-breakpoint--xl;

  --rhe-theme--grid-breakpoint--xs--max:  $rh-global--grid-breakpoint--xs--max;
  --rhe-theme--grid-breakpoint--sm--max:  $rh-global--grid-breakpoint--sm--max;
  --rhe-theme--grid-breakpoint--md--max:  $rh-global--grid-breakpoint--md--max;
  --rhe-theme--grid-breakpoint--lg--max:  $rh-global--grid-breakpoint--lg--max;

  /* SPACERS / GUTTERS */
  --rhe-theme--spacer--xs:                $rh-global--spacer--xs;
  --rhe-theme--spacer--sm:                $rh-global--spacer--sm;
  --rhe-theme--spacer:                    $rh-global--spacer; // base
  --rhe-theme--spacer--md:                $rh-global--spacer--md;
  --rhe-theme--spacer--lg:                $rh-global--spacer--lg;
  --rhe-theme--spacer--xl:                $rh-global--spacer--xl;
  --rhe-theme--spacer--xxl:               $rh-global--spacer--xxl;
}

$xs:                      	480px;
$sm:                      	768px;
$md:                      	992px;
$lg:                      	1200px;
$xl:						            2000px;
$base_gutter_width:         30px;
$gutter_width_lg:           45px;

// Begin replace here
@mixin GridMediaQuery($point) {
  @if $point == "xs" {
    @media screen and (max-width: $sm) {
      @content;
    }
  } @else if $point == "sm" or $point == "" or $point == null {
    @media screen and (min-width: $sm) {
      @content;
    }
  } @else if $point == "md" {
    @media screen and (min-width: $md) {
      @content;
    }
  } @else if $point == "lg" {
    @media screen and (min-width: $lg) {
      @content;
    }
  } @else if $point == "xl" {
    @media screen and (min-width: $xl) {
      @content;
    }
  }
}

/// Creates flexbox item
/// @group mixins
/// @moduleType mixin
/// @parameter {Suffix} xs, sm, md, lg, xl, null
@mixin FlexItemModifiers($suffix: null) {
  // generate column span modifiers
  @for $col-num from 1 through 12 {
    > .rh-m-#{$col-num}-col#{$suffix} {
      $this-size: ($col-num / 12) * 100%;
      width: calc(#{$this-size} - #{$base_gutter_width});
    }
  }

  // Start-at and row-span aren't available in fallbacks.
}

/// Creates grid item
/// @group mixins
/// @moduleType mixin
/// @parameter {Suffix} xs, sm, md, lg, xl, null
@mixin GridItemModifiers($suffix: null) {
  // generate column span modifiers
  @for $col-num from 1 through 12 {
    > .rh-m-#{$col-num}-col#{$suffix} {
      grid-column-start: auto;
      grid-column-end: span $col-num;
    }
  }

  // // generate column offset modfiers
  @for $col-num from 1 through 12 {
    > .rh-m-offset-#{$col-num}-col#{$suffix} {
      grid-column-start: col ($col-num + 1);
    }
  }

  // generate column startat modfiers
  @for $col-num from 1 through 12 {
    > .rh-m-startat-#{$col-num}-col#{$suffix} {
      grid-column-start: $col-num !important; // removed +1 so it's value is literal.
    }
  }

  // generate row span modfiers
  @for $row-num from 1 through 12 {
    > .rh-m-#{$row-num}-row#{$suffix} {
      grid-row: span $row-num;
    }
  }
}

@mixin FlexAllModifiers($suffix: null) {
  @for $col-num from 1 through 12 {
    &.rh-m-all-#{$col-num}-col#{$suffix} {
      > * {
        $this-size: ($col-num / 12) * 100%;
        width: calc(#{$this-size} - #{$base_gutter_width});
      }
    }
  }
}

@mixin GridAllModifiers($suffix: null) {
  @for $col-num from 1 through 12 {
    &.rh-m-all-#{$col-num}-col#{$suffix} {
      > * {
        grid-column-start: auto;
        grid-column-end: span $col-num;
      }
    }
  }
}

/// Flex base
@supports not (display: grid) {
  .rh-l-grid {
    box-sizing: border-box;
    display: flex;
    flex-wrap: wrap;

    > *,
    &__item {
      box-sizing: border-box;
      width: 100%;
      margin: 0 auto;
    }

    // Generate default modifier classes
    $breakpoints: (
      "": null,
      "xs": "-on-xs",
      "sm": "-on-sm",
      "md": "-on-md",
      "lg": "-on-lg",
      "xl": "-on-xl"
    ) !global;

    // Loop through $breakpoints map to generate responsive classes
    @each $breakpoint, $value in $breakpoints {
      @include GridMediaQuery($breakpoint) {
        @include FlexAllModifiers($value);
        @include FlexItemModifiers($value);
      }
    }

    &.rh-m-gutters {
      margin: -$base_gutter_width / 2;
        
        & > * {
          margin: $base_gutter_width / 2;
        }
    }
  }
}

@supports (display: grid) {
  .rh-l-grid {
    display: grid;
    grid-template-columns: repeat(12, [col-start] 1fr); // throws an error in Compass's compilation
    // grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;

    > *,
    &__item {
      //flex-basis: calc(100%/12);
      grid-column-start: auto;
      grid-column-end: span 12;
    }

    // Generate default modifier classes
    $breakpoints: (
      "": null,
      "xs": "-on-xs",
      "sm": "-on-sm",
      "md": "-on-md",
      "lg": "-on-lg",
      "xl": "-on-xl"
    ) !global;

    // Loop through $breakpoints map to generate responsive classes
    @each $breakpoint, $value in $breakpoints {
      @include GridMediaQuery($breakpoint) {
        @include GridAllModifiers($value);
        @include GridItemModifiers($value);
      }
    }

    &.rh-m-gutters {
      grid-gap: $base_gutter_width;
    }
  }
}