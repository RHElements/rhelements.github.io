<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RHElements</title>
    <link>rhelements.github.io/</link>
    <description>Recent content on RHElements</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Aug 2018 14:02:31 -0400</lastBuildDate>
    
	<atom:link href="rhelements.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Browser Support</title>
      <link>rhelements.github.io/getting-started/browser-support/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/getting-started/browser-support/</guid>
      <description>RHElements are built on top of the Custom Elements v1 spec, but we can support all of the major browsers with web components polyfills, including IE 11.
   Chrome Firefox Safari Edge IE 11     &amp;#10003; &amp;#10003; &amp;#10003; &amp;#10003; &amp;#10003;    Written in ES6 To make sure we&amp;rsquo;re future-proof, RHElements are written in ES6. As more browsers begin to support the use of ES6 modules and the ability to import dependencies, the ES6 versions of our RHElements can be used directly.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>rhelements.github.io/develop/step-1a/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-1a/</guid>
      <description>Prerequisites Clone the RHElements/rhelements and run the install command from the root of the repository.
npm install  Generate a RHElement Using the generator-rhelement, which installed as a dev dependency, the generator will ask you a few questions that will help with the scaffolding. Make sure you are in the root directory of the RHElements repository.
npm run new  Scaffolding Structure The generator will scaffold out a new RHElement that will include a ES6 module version of your element as well as a version compiled to ES5 code.</description>
    </item>
    
    <item>
      <title>Create a themed RHElement</title>
      <link>rhelements.github.io/theme/rhe-theme-component/</link>
      <pubDate>Sat, 15 Sep 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/theme/rhe-theme-component/</guid>
      <description>When applying colors to your new component, it&amp;rsquo;s important to reference CSS variables from the RHElements palette. This way people using the components will be able to update all of them at once by changing the value of those palette variables.
It&amp;rsquo;s also important for all CSS variables to have fallback values, but then the code can become difficult to read and manage, since you now must input two colors (the variable of choice and the fallback):</description>
    </item>
    
    <item>
      <title>Framework Support</title>
      <link>rhelements.github.io/getting-started/framework-support/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/getting-started/framework-support/</guid>
      <description>Supported and Tested Frameworks If a framework isn&amp;rsquo;t listed below, it doesn&amp;rsquo;t mean that RHElements won&amp;rsquo;t work with that framework. Chances are that RHElements will work, it&amp;rsquo;s just that we aren&amp;rsquo;t explicitly testing against that framework.
 AngularJS Angular React Vue  Every RHElement is built on top of the Custom Elements v1 spec. There are some caveats, but we&amp;rsquo;ll get into those later.
Framework Integration We&amp;rsquo;re working on writing a few guides that will demonstrate how to incorporate RHElements into certain frameworks.</description>
    </item>
    
    <item>
      <title>Polyfills</title>
      <link>rhelements.github.io/getting-started/polyfills/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/getting-started/polyfills/</guid>
      <description>Browser Support Some browsers do not support ES6 modules, custom elements, shadow DOM, and custom CSS variables yet. We&amp;rsquo;ll need to add some polyfills to make everything work in our supported browsers.
The easiest way to get everything working is to add the following polyfills to the head of your document.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;RHElements&amp;lt;/title&amp;gt; &amp;lt;!-- polyfills --&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.10/custom-elements-es5-adapter.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.10/webcomponents-lite.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html  What type of Javascript are you using?</description>
    </item>
    
    <item>
      <title>Create a RHElement</title>
      <link>rhelements.github.io/develop/step-1b/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-1b/</guid>
      <description>Prerequisites Before you begin, make sure you&amp;rsquo;ve followed the Prerequisites in Getting Started.
The RHElement Generator Use the RHElement generator to start the scaffolding process. From the root directory of the RHElements repository, run the following command.
npm run new  The generator will ask you a series of questions to set up your project.
 Your element name:
 Your element&amp;rsquo;s name should be lowercase and needs to contain at least one hyphen.</description>
    </item>
    
    <item>
      <title>RHElements color palette</title>
      <link>rhelements.github.io/theme/rhe-color-palette/</link>
      <pubDate>Sat, 15 Sep 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/theme/rhe-color-palette/</guid>
      <description>Looking for values fast? You can find a list of all the system colors here.
UI Colors A user interface uses color to convey:
 Feedback: Error and success states Information: Charts, graphs, and wayfinding elements Hierarchy: Showing structured order through color and typography  We&amp;rsquo;ve exposed 3 color variants for this design system to represent your brand:
 Base Complement Accent  These colors are used throughout RHElements, but accent is the color which should stand out the most.</description>
    </item>
    
    <item>
      <title>Develop a Structure</title>
      <link>rhelements.github.io/develop/step-2a/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2a/</guid>
      <description>Run the dev command found in the package.json file at the root of your element to start watching for changes to any files located in the /src directory. This will build rh-cool-element.js and rh-cool-element.umd.js whenever you save changes.
# from the root of your element npm run dev  After running the dev command, start a server at the root of the RHElements repository to view it in the browser.</description>
    </item>
    
    <item>
      <title>Write your HTML</title>
      <link>rhelements.github.io/develop/step-2b/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2b/</guid>
      <description>Now that our element is set up and our dev server is running, let&amp;rsquo;s take advantage of the slot and shadow root to make our element a bit more interesting.
We&amp;rsquo;ll edit the /src/rh-cool-element.html file to add some additional HTML. Let&amp;rsquo;s turn rh-cool-element into a profile element that has a profile photo, a username, and a button to follow the user.
Here&amp;rsquo;s the updated HTML in /src/rh-cool-element.html:
&amp;lt;div id=&amp;quot;profile-pic&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;div&amp;gt; &amp;lt;button&amp;gt;Follow&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt;  We&amp;rsquo;ll also need to update /demo/index.</description>
    </item>
    
    <item>
      <title>Write your CSS (or Sass)</title>
      <link>rhelements.github.io/develop/step-2c/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2c/</guid>
      <description>We want the rh-cool-element to have a profile photo, a username, and a follow button. Right now, it only contains the HTML structure, but we can style our element by updating our Sass (or CSS) to make it look the way we want.
We&amp;rsquo;ll be working in the /src/rh-cool-element.scss file since we decided to use the Sass option in the RHElement generator.
Your Sass file will initially import additional Sass from the rh-sass node module, but we can ignore that for now.</description>
    </item>
    
    <item>
      <title>Integrate your JavaScript</title>
      <link>rhelements.github.io/develop/step-2d/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-2d/</guid>
      <description>In this step, we will: - Add a click listener to the follow button - Set a follow state on element - Add a the profile photo - Properly disconnect our element
First, we&amp;rsquo;ll go ahead and listen for click events on the button. The best place to add a click listener is in the constructor, according to the W3C Custom Elements draft section called &amp;ldquo;2.2 Requirements for custom element constructors&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Write tests</title>
      <link>rhelements.github.io/develop/step-3/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-3/</guid>
      <description>Let&amp;rsquo;s write a test for the rh-cool-element.
We rely on a few tools to ensure our element is reliable in production: 1. Web Component Tester, built and maintained by the Polymer team, makes testing easy. All we have to do is add the element&amp;rsquo;s HTML to a file and set up our suite of tests. 2. We&amp;rsquo;ll use the Chai Assertion Library to make sure our tests pass since Mocha and Chai are both included in Web Component Tester.</description>
    </item>
    
    <item>
      <title>Publish</title>
      <link>rhelements.github.io/develop/step-4/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/develop/step-4/</guid>
      <description>We&amp;rsquo;ve been publishing our RHElements to the @rhelements organization on npm.</description>
    </item>
    
    <item>
      <title>RH Layouts</title>
      <link>rhelements.github.io/theme/rhe-layouts/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/theme/rhe-layouts/</guid>
      <description>.rhe-l-grid  * { background: #e0d7ee; padding: 8px; }    Grid  Pure Grid Item Item Item Item Item  Code &amp;lt;div class=&#34;rhe-l-grid rhe-m-gutters rhe-m-all-6-col rhe-m-all-4-col-on-md rhe-m-all-3-col-on-lg&#34;&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;   Bootstrap-style Columns Default Item rhe-m-2-col rhe-m-10-col rhe-m-4-col rhe-m-4-col rhe-m-4-col rhe-m-6-col rhe-m-3-col-on-md rhe-m-6-col rhe-m-3-col-on-md rhe-m-startat-7-col-on-md rhe-m-6-col rhe-m-3-col-on-md  Code &amp;lt;div class=&#34;rhe-l-grid rhe-m-gutters&#34;&amp;gt; &amp;lt;div class=&#34;rhe-l-grid__item&#34;&amp;gt;Default Item&amp;lt;/div&amp;gt; &amp;lt;div class=&#34;rhe-l-grid__item rhe-m-2-col&#34;&amp;gt;&amp;lt;code&amp;gt;rhe-m-2-col&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&#34;rhe-l-grid__item rhe-m-10-col&#34;&amp;gt;&amp;lt;code&amp;gt;rhe-m-10-col&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&#34;rhe-l-grid__item rhe-m-4-col&#34;</description>
    </item>
    
    <item>
      <title>Join the Community</title>
      <link>rhelements.github.io/site-info/community/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/site-info/community/</guid>
      <description>Contribute to RHElements How to Report a Bug Think you found a bug? Please check the list of open issues to see if your bug has already been reported. If it hasn&amp;rsquo;t please submit a new issue.
How to Suggest a Feature or Enhancement Open an issue which describes the feature you would like to see, why you want it, how it should work, etc.
Bootstrapping Your Local Development Environment npm install  Running Tests npm test  Code of Conduct This project is governed by the Contributor Covenant Code of Conduct.</description>
    </item>
    
    <item>
      <title>Code of conduct</title>
      <link>rhelements.github.io/site-info/code-of-conduct/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/site-info/code-of-conduct/</guid>
      <description>Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.
Our Standards Examples of behavior that contributes to creating a positive environment include:</description>
    </item>
    
    <item>
      <title>Get Help</title>
      <link>rhelements.github.io/site-info/get-help/</link>
      <pubDate>Fri, 31 Aug 2018 14:02:31 -0400</pubDate>
      
      <guid>rhelements.github.io/site-info/get-help/</guid>
      <description>Reach out to the team Drop us a line at rhelements@redhat.com</description>
    </item>
    
  </channel>
</rss>